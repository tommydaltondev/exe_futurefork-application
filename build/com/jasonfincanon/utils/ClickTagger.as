package com.jasonfincanon.utils{	/*For more information and changelog please visithttp://www.jasonfincanon.com/downloads/clicktaggerPACKAGE: com.jasonfincanon.utilsCLASS: ClickTaggerCREATED: 02-01-2010CREATED BY: Jason FincanonLAST UPDATED: 04-13-2010UPDATED BY: Jason Fincanon*/	import flash.display.LoaderInfo;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.system.Capabilities;	import flash.display.InteractiveObject;		public class ClickTagger {				private var _clickTags:Array = new Array(); // Array of clicktag objects		private var _clickObjects:Array = new Array(); // Array of clickable items		private var _targetWindow:String = "_blank"; // window to lauch the url in		private var _tagName:String = "clicktag"; // used in solving for case sensitivity		private var _playerType:String = Capabilities.playerType.toLowerCase(); // check for local testing		private var _extInterfaceAvailable:Boolean = false; // true if in browser AND ExternalInterface.available		private var _securePattern:RegExp = new RegExp("^http[s]?\:\\/\\/([^\\/]+)"); // RegExp for security check on clicktag url				public function ClickTagger(loaderinfo:LoaderInfo){			for(var p:String in loaderinfo.parameters){				// solve for case sensitivity (clickTag, ClickTag, clickTAG, etc)				if (p.toLowerCase().indexOf(_tagName) == 0) {					var tagPosition:int = 0;					if(p.length > _tagName.length){						tagPosition = int(p.substr(_tagName.length))-1;					}					_clickTags.push({tagIndex:tagPosition,tagUrl:loaderinfo.parameters[p]})				}			}			_clickTags.sortOn("tagIndex", Array.NUMERIC);		}				public function assignClickTag(element:InteractiveObject,failSafeUrl:String,tagNumber:int=1):void{			tagNumber = tagNumber < 0 ? 0 : tagNumber-1;			element.addEventListener(MouseEvent.CLICK,clickOut,false,0,true);			_clickObjects.push({clickElement:element,fallBack:failSafeUrl,tagIndex:tagNumber});		}		private function clickOut(e:MouseEvent):void{			var clickedIndex:int;			var destination:String;						clickLoop: for(var obj:Object in _clickObjects){				if(e.target == _clickObjects[obj].clickElement){					clickedIndex = _clickObjects[obj].tagIndex;					destination = _clickObjects[obj].fallBack;					break clickLoop;				}			}						if(_playerType=="activex" || _playerType=="plugin"){				if(_clickTags[clickedIndex]){					if(secureTag(_clickTags[clickedIndex].tagUrl)){						destination = _clickTags[clickedIndex].tagUrl;					}				}				_extInterfaceAvailable = ExternalInterface.available;			}						if (_extInterfaceAvailable) {				ExternalInterface.call('window.open',destination,targetWindow);			}else{				navigateToURL(new URLRequest(destination),targetWindow);			}		}				private function secureTag(targetURL:String):Boolean {			var resultObj:Object = _securePattern.exec(targetURL);			if (resultObj == null || targetURL.length >= 4096) {				return false;			}			return true;		}				public function get targetWindow():String{			return _targetWindow;		}		public function set targetWindow(value:String):void{			_targetWindow = value;		}	}	}